name: CMake

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - name: "(pkgs): Update package lists"
      run: sudo apt-get update
    - name: "(pkgs): Upgrade packages"
      run: sudo apt-get upgrade -y
    - name: "(pkgs): Install toolchain"
      run: sudo apt-get install -y cmake gcc-arm-none-eabi libnewlib-arm-none-eabi build-essential libstdc++-arm-none-eabi-newlib python3 git


    - uses: actions/checkout@v3
      with:
        # Checkout submodules (non-recursive)
        submodules: 'true'

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory.
      run: cmake -B ${{github.workspace}}/build -S ${{github.workspace}}/src

    - name: Build
      # Build the program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Upload Build Artifacts (uf2, hex, bin)
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: |
          build/main_*.*

#    - name: Test
#      working-directory: ${{github.workspace}}/build
#      # Execute tests defined by the CMake configuration.
#      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
#      run: ctest -C ${{env.BUILD_TYPE}}

